// Generated by Haxe 4.0.0-preview.5+83d9c11
(function () { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var rayTriangle_PerfTest = function() {
	var vertices = [];
	var j;
	var _g = 0;
	var _g1 = 1000000;
	while(_g < _g1) {
		var i = _g++;
		j = i * 3;
		var this1 = new rayTriangle_V3(Math.random() * 2. - 1.,Math.random() * 2. - 1.,Math.random() * 2. - 1.);
		vertices[j] = this1;
		var this2 = new rayTriangle_V3(Math.random() * 2. - 1.,Math.random() * 2. - 1.,Math.random() * 2. - 1.);
		vertices[j + 1] = this2;
		var this3 = new rayTriangle_V3(Math.random() * 2. - 1.,Math.random() * 2. - 1.,Math.random() * 2. - 1.);
		vertices[j + 2] = this3;
	}
	var vertices1 = vertices;
	var numVectices = 3000000;
	var this4 = new rayTriangle_V3(0.,0.,0.);
	var this5 = new rayTriangle_V3(0.,0.,0.);
	var r = new rayTriangle_Ray(this4,this5);
	var t = 0.;
	var k;
	var numHit = 0;
	var numMiss = 0;
	var tStart = Date.now() / 1000;
	var _g11 = 0;
	while(_g11 < 100) {
		var i1 = _g11++;
		var lat = Math.acos(Math.random() * 2. - 1.) - Math.PI / 2;
		var lon = Math.PI / 2 * Math.random();
		var this6 = new rayTriangle_V3(Math.cos(lat) * Math.cos(lon),Math.cos(lat) * Math.sin(lon),Math.sin(lat));
		r.orig = this6;
		var lat1 = Math.acos(Math.random() * 2. - 1.) - Math.PI / 2;
		var lon1 = Math.PI / 2 * Math.random();
		var this7 = new rayTriangle_V3(Math.cos(lat1) * Math.cos(lon1),Math.cos(lat1) * Math.sin(lon1),Math.sin(lat1));
		var a = this7;
		var b = r.orig;
		var this8 = new rayTriangle_V3(a.x - b.x,a.y - b.y,a.z - b.z);
		var this9 = this8;
		var len = Math.sqrt(this9.x * this9.x + this9.y * this9.y + this9.z * this9.z);
		var this10 = new rayTriangle_V3(this9.x / len,this9.y / len,this9.z / len);
		r.dir = this10;
		var _g12 = 0;
		while(_g12 < 1000000) {
			var j1 = _g12++;
			k = j1 * 3 | 0;
			var v0 = vertices1[k | 0];
			var v1 = vertices1[k + 1 | 0];
			var v2 = vertices1[k + 2 | 0];
			var this11 = new rayTriangle_V3(v2.x - v0.x,v2.y - v0.y,v2.z - v0.z);
			var v0v2 = this11;
			var a1 = r.dir;
			var this12 = new rayTriangle_V3(a1.y * v0v2.z - a1.z * v0v2.y,a1.z * v0v2.x - a1.x * v0v2.z,a1.x * v0v2.y - a1.y * v0v2.x);
			var pvec = this12;
			var this13 = new rayTriangle_V3(v1.x - v0.x,v1.y - v0.y,v1.z - v0.z);
			var v0v1 = this13;
			var det = v0v1.x * pvec.x + v0v1.y * pvec.y + v0v1.z * pvec.z;
			if(det < 0.000001) {
				t = -Infinity;
			} else {
				var invDet = 1. / det;
				var a2 = r.orig;
				var this14 = new rayTriangle_V3(a2.x - v0.x,a2.y - v0.y,a2.z - v0.z);
				var tvec = this14;
				var u = (tvec.x * pvec.x + tvec.y * pvec.y + tvec.z * pvec.z) * invDet;
				if(u < 0 || u > 1) {
					t = -Infinity;
				} else {
					var this15 = new rayTriangle_V3(tvec.y * v0v1.z - tvec.z * v0v1.y,tvec.z * v0v1.x - tvec.x * v0v1.z,tvec.x * v0v1.y - tvec.y * v0v1.x);
					var qvec = this15;
					var this16 = r.dir;
					var v = (this16.x * qvec.x + this16.y * qvec.y + this16.z * qvec.z) * invDet;
					t = v < 0 || u + v > 1 ? -Infinity : (v0v2.x * qvec.x + v0v2.y * qvec.y + v0v2.z * qvec.z) * invDet;
				}
			}
		}
		if(t >= 0) {
			++numHit;
		} else {
			++numMiss;
		}
	}
	var tEnd = Date.now() / 1000;
	var tTotal = tEnd - tStart;
	var tTotal2 = rayTriangle_PerfTest.floatToStringPrecision(tTotal,2);
	var numTests = 100000000;
	var hitPerc = rayTriangle_PerfTest.floatToStringPrecision(numHit / numTests * 100.0,2);
	var missPerc = rayTriangle_PerfTest.floatToStringPrecision(numMiss / numTests * 100.0,2);
	var mTestsPerSecond = rayTriangle_PerfTest.floatToStringPrecision(numTests / tTotal / 1000000,2);
	console.log("src/rayTriangle/PerfTest.hx:96:","\n" + ("Total intersection tests: " + numTests + " \n") + ("  Hits:\t\t\t   " + numHit + " ( " + hitPerc + " ) \n") + ("  Misses:\t\t   " + numMiss + " ( " + missPerc + " ) \n") + ("  Total time:\t\t\t  " + tTotal2 + " seconds \n") + ("  Millions of tests per second:\t  " + mTestsPerSecond + " \n"));
};
rayTriangle_PerfTest.__name__ = true;
rayTriangle_PerfTest.main = function() {
	new rayTriangle_PerfTest();
};
rayTriangle_PerfTest.floatToStringPrecision = function(n,prec) {
	if(n == 0) {
		var _g = [];
		var _g1 = 0;
		var _g2 = prec;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push("0");
		}
		return "0." + _g.join("");
	}
	var minusSign = n < 0.0;
	n = Math.abs(n);
	var intPart = Math.floor(n);
	var p = Math.pow(10,prec);
	var fracPart = Math.round(p * (n - intPart));
	var buf_b = "";
	if(minusSign) {
		buf_b += String.fromCodePoint(45);
	}
	buf_b += Std.string(intPart == null ? "null" : "" + intPart);
	if(fracPart == 0) {
		buf_b += String.fromCodePoint(46);
		var _g3 = 0;
		var _g11 = prec;
		while(_g3 < _g11) {
			var i1 = _g3++;
			buf_b += String.fromCodePoint(48);
		}
	} else {
		buf_b += String.fromCodePoint(46);
		p /= 10;
		var nZeros = 0;
		while(fracPart < p) {
			p /= 10;
			buf_b += String.fromCodePoint(48);
		}
		buf_b += fracPart == null ? "null" : "" + fracPart;
	}
	return buf_b;
};
var rayTriangle_Ray = function(orig,dir) {
	this.orig = orig;
	this.dir = dir;
};
rayTriangle_Ray.__name__ = true;
var rayTriangle_V3 = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
rayTriangle_V3.__name__ = true;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
rayTriangle_PerfTest.main();
})();
